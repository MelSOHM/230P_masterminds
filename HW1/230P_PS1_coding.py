# -*- coding: utf-8 -*-
"""PS1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dIRTsk6iqp_ZaZ4SPvw6ryUCGnSDnV2d

# Financial Time Series Dataset

## Overview
This dataset contains **raw** daily financial and macroeconomic data for 100 firms over 121 trading days. The dataset provides fundamental features that serve as building blocks for feature engineering and machine learning applications in financial markets. Researchers are expected to construct higher-level features (interactions, lags, transformations) from these raw inputs.

## Dataset Structure
- **Total observations**: ~12,100 rows (100 firms × 121 days)
- **Raw features**: 7 columns (plus identifiers)
- **Target variable**: `ret` (returns)
- **Time period**: Covers 121 business days

## Column Descriptions

### Identifiers
- **`date`**: Trading date (assuming all days are trading days -- in reality weekends and holidays should be excluded)
- **`firm_id`**: Unique identifier for each firm (0-99)

### Macroeconomic Variables
- **`macro1`**: Categorical macroeconomic regime indicator with five possible states: 'Expansion', 'Contraction', 'Recovery', 'Peak', 'Trough'
- **`macro2`**: Continuous macroeconomic factor, standardized values capturing quantitative aspects of economic environment

### Firm-Specific Variables
- **`price`**: Average daily price of the firm's stock (in currency units)
- **`firm1`**: First firm-specific characteristic (standardized), could represent factors like size, liquidity, or operational metrics
- **`firm2`**: Second firm-specific characteristic (standardized), capturing different firm attributes
- **`firm3`**: Third firm-specific characteristic (standardized), representing additional firm-level factors

### Target Variable
- **`ret`**: Daily stock return for the firm, calculated as the percentage change in stock value

## Data Characteristics

### Time Series Properties
- Data is ordered chronologically by date
- Each firm appears once per trading day
- Macroeconomic factors are the same across all firms on a given date
- Macro1 shows regime persistence (economic states tend to persist over time)
- Firm-specific characteristics and prices vary by both firm and date

### Statistical Properties
- Returns are approximately centered around zero with fat-tailed distribution
- Macroeconomic regime (macro1) shows realistic persistence between states
- Continuous macro factor (macro2) and firm characteristics are standardized
- Prices are in absolute currency units (not standardized)




### Train-Validation Split Strategy
**Use Time-Based Splitting Only**

Since this is time series data, you **MUST NOT** use random train-test splits. Instead, use a temporal cutoff to maintain the chronological order:

```python
# Example: Use first 80% of time period for training, last 20% for validation -- you can use different cuts
cutoff_date = df['date'].quantile(0.8)
train_data = df[df['date'] <= cutoff_date]
val_data = df[df['date'] > cutoff_date]
```

Alternative approach using specific date:
```python
# Set a specific cutoff date -- you can use different cuts
cutoff_date = pd.to_datetime('2020-03-01')  # Adjust based on your data range
train_data = df[df['date'] <= cutoff_date]
val_data = df[df['date'] > cutoff_date]
```



### Modeling Considerations

**Feature Engineering Required**: This dataset contains only raw features. You will need to construct higher-level features such as:

- **Lagged variables**: Create previous days' values for all features
- **Interaction terms**: Construct products of features (e.g., macro1×macro2, firm1×firm2)
- **Polynomial features**: Add squared, cubed terms for non-linear relationships
- **Price transformations**: Log returns, price ratios, moving averages
- **Rolling statistics**: Moving averages, volatility measures, momentum indicators
- **Categorical encoding**: Proper encoding of macro1 (one-hot, label encoding, or embedding)

# Assignment 1: Financial Return Prediction using Elastic Net (20pts)

## Overview
You are provided with a financial time series dataset (`training_data.parquet`) containing daily observations for multiple firms. Your task is to build a predictive model for stock returns using Elastic Net regression and evaluate its performance.

## Dataset Information
- **File**: `training_data.parquet`
- **Structure**: Panel data with firms observed over time
- **Target Variable**: `ret` (daily stock returns)
- **Features**: Raw financial and macroeconomic variables (see column names in the dataset)

## Part 1: Elastic Net Model Implementation

### Suggested steps:

1. **Data Loading and Exploration**
   - Load the training dataset from `training_data.parquet`
   - Perform exploratory data analysis to understand the data structure
   - Identify and handle any missing values or data quality issues

2. **Feature Engineering**
   - You may create additional features from the raw variables (interactions, lags, transformations)
   - Ensure proper handling of categorical variables if present
   - Consider financial domain knowledge in your feature construction

3. **Train-Validation Split**
   - Use time-based splitting (NOT random splitting)
   - Split the data chronologically (e.g., use first 80% of time period for training, remaining 20% for validation)
   - Justify your choice of split point

4. **Model Development**
   - Implement ElasticNet for return prediction
   - Your final model must accept the same raw input feature names as in the training data
   - The model should output a single prediction for the target variable `ret`

5. **Hyperparameter Tuning**
   - Tune the following hyperparameters:
     - `alpha` (regularization strength)
     - `l1_ratio` (balance between L1 and L2 regularization)
   - Use appropriate validation strategy (time-series aware)
   - Document your hyperparameter search process and final choices



### Deliverables for Part 1:
- Python code implementing the complete pipeline
- A trained model object that can make predictions on new data
- Documentation of your feature engineering choices
- Justification for hyperparameter selection

### Code Structure Requirements:
```python
# Your final model should work like this:
import pandas as pd

# Load new data with same column names as training data
new_data = pd.read_parquet('new_data.parquet')

# Make predictions
predictions = your_model.predict(new_data)  # Should output 'ret' predictions
```

## Part 2: Feature Importance Analysis

### Requirements:

1. **Permutation-Based Feature Importance**
   - Implement permutation feature importance on your best-performing model
   - Calculate importance scores for each feature in your final model
   - Use your validation set for this analysis

2. **Statistical Significance Testing**
   - For each feature, conduct statistical tests to determine if the importance score is significantly different from zero

   - Report the p-value of each feature's importance

3. **Results Interpretation**
   - Rank features by their importance scores
   - Identify which features are statistically significant predictors
   - Provide economic/financial interpretation of your findings
   - Discuss any surprising results

### Deliverables for Part 2:
- Implementation of permutation-based importance calculation
- Statistical significance tests for each feature
- Visualization of feature importance with statistical significance indicators
- Written interpretation of results (2-3 paragraphs)

## Evaluation Criteria

Your model will be evaluated based on:

1. **Predictive Performance (70%)**
   - Performance on a hidden test set from the time period immediately following your training data
   - Primary metric: Out-of-sample R² score
   - Secondary metrics: RMSE and directional accuracy

2. **Technical Implementation (15%)**
   - Correct implementation of time-series validation
   - Code quality and documentation

3. **Feature Importance Analysis (15%)**
   - Correct implementation of permutation importance
   - Appropriate statistical testing
   - Quality of interpretation and economic reasoning

## Submission Requirements

Submit the following files:

1. **`main.py`** or **`main.ipynb`**: Complete implementation
2. **`model.pkl`**: Your trained final model (saved using pickle or joblib)
3. **`feature_importance_results.csv`**: Feature importance scores with significance tests
4. **`report.pdf`**: a short report summarizing your approach, findings, and interpretations
5. **`requirements.txt`**: a list of packages used and the corresponding versions. This is for replication purposely.

**important note**: If your model cannot be run (be loaded using load pickle and do .predict with the test data), you would receive the lowest tier of rankings.

# Assignment 2: Financial Return Prediction using XGBoost (20pts)

Repeat the first exercise using XGBoost instead of ElasticNet. For feature importance use the number of times a feature is used to split across all trees. Use bootstrapping to estimate the p-values of feature importance scores.

The deliverables are the same as the previous exercise with the same grading.
"""